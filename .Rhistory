library(ggplot2)
install(ggplot2)
install('ggplot2')
install.packages("ggplot2")
library(ggplot2)
data(diamonds)
summary(diamonds)
?diamonds
qplot(data=diamonds, x=price)
qplot(data=diamonds, x=price, binwidth=100)
qplot(data=diamonds, x=price, binwidth=500)
qplot(data=diamonds, x=price, binwidth=1000)
qplot(data=diamonds, x=price, binwidth=300)
summary(diamonds$price)
length(diamons$price < 500)
length(diamonds$price < 500)
length(diamonds$price < 250)
length(diamonds$price >= 15000)
length(subset(diamonds, price < 500))
length(subset(diamonds, price < 350))
length(subset(diamonds, price < 250
)
)
length(subset(diamonds, price >= 15000))
length(diamonds[diamonds$price < 500,])
diamonds[diamonds$price < 500,]
dim(diamonds)
dim(diamonds[diamonds$price < 500,])
length(diamonds[dianmonds$price < 500, 8])
length(diamonds[diamonds$price < 500, 8])
length(diamonds[diamonds$price < 250, 8])
length(diamonds[diamonds$price >= 15000, 8])
qplot(data=diamonds, x=price, binwidth=100, xlim=c(0, 1000))
qplot(data=diamonds, x=price, binwidth=100, xlim=c(300, 1000))
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1000))
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1500))
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1200))
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1200), colour="blue")
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1200), colour="red")
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1200), colour="red", fill="grey")
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1200), fill="blue")
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1200), fill="green")
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1200), fill="green")
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1200), colour="green")
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1200)) + geom_histogram(colour="red")
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1200), colour=I("red"))
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1200), colour=I("red")) + scale_x_continuous(break=c(300,1200,50))
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1200), colour=I("red")) + scale_x_continuous(breaks=c(300,1200,50))
qplot(data=diamonds, x=price, binwidth=50, colour=I("red")) + scale_x_continuous(lim=c(300,1200), breaks=c(300,1200,50))
qplot(data=diamonds, x=price, binwidth=50, xlim=c(300, 1200), colour=I("red"))
ggsave('priceHistogram.jpg')
qplot(data=diamonds, x=price, color=cut)
qplot(data=diamonds, x=price) + facet_grid(. ~ cut)
by(diamonds, price, cut, summary)
by(diamonds$price, cut, summary)
?by
by(diamonds, cut, summary)
by(diamonds, diamonds$price, diamonds$cut, summary
)
by(diamonds, diamonds$price, diamonds$cut, summary)
by(diamonds, diamonds$cut, summary)
by(diamonds[,c(2,7)], diamonds$cut, summary)
by(diamonds$price, diamonds$cut, summary)
summary(diamonds$price)
by(diamonds$price, diamonds$cut, max)
by(diamonds$price, diamonds$cut, max, digits=max(getOption('digits')))
digits
max(getOption('digits'))
qplot(x = price, data = diamonds) + facet_wrap(~cut)
?facet_wrap
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales="free_y")
qplot(x = price, data = diamonds) + facet_wrap(~cut)
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds) + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=100) + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=50) + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=300) + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=100) + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=100) + x_scale_log10() + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=100) + x_scalelog10() + facet_wrap(~cut, scales="free_y")
?x_scale
qplot(x = price/carat, data = diamonds, binwidth=100) + scale_x_log10() + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=10) + scale_x_log10() + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds) + scale_x_log10() + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=1) + scale_x_log10() + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=1000) + scale_x_log10() + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=500) + scale_x_log10() + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=0.5) + scale_x_log10() + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=0.1) + scale_x_log10() + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=0.05) + scale_x_log10() + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=0.075) + scale_x_log10() + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=0.1) + scale_x_log10() + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds, binwidth=0.075) + scale_x_log10() + facet_wrap(~cut, scales="free_y")
qplot(data=diamonds, x=cut, y=price, geom="boxplots")
qplot(data=diamonds, x=cut, y=price, geom="boxplot")
qplot(data=diamonds, x=cut, y=price, geom="boxplot", ylim=c(200,7000))
qplot(data=diamonds, x=cut, y=price, geom="boxplot") + coord_cartesian(ylim=c(200,5000))
qplot(data=diamonds, x=cut, y=price, geom="boxplot") + coord_cartesian(ylim=c(200,6000))
qplot(data=diamonds, x=cut, y=price, geom="boxplot") + coord_cartesian(ylim=c(200,7000))
qplot(data=diamonds, x=cut, y=clarity, geom="boxplot")
qplot(data=diamonds, y=price, x=clarity, geom="boxplot")
qplot(data=diamonds, x=clarity, y=price, geom="boxplot") + coord_cartesian(ylim=c(200,7000))
qplot(data=diamonds, y=price, x=color, geom="boxplot")
qplot(data=diamonds, x=color, y=price, geom="boxplot") + coord_cartesian(ylim=c(200,7000))
qplot(data=diamonds, x=color, y=price, geom="boxplot") + coord_cartesian(ylim=c(200,8000))
by(diamonds$price, diamonds$color, summary)
by(diamonds$price, diamonds$color, iqr
)
?IQR
by(diamonds$price, diamonds$color, IQR)
?diamonds
qplot(data=diamonds, x=color, y=price/carat, geom="boxplot") + coord_cartesian(ylim=c(200,8000))
qplot(data=diamonds, x=color, y=price/carat, geom="boxplot") + coord_cartesian(ylim=c(2000,6000))
qplot(data=diamonds, x=color, y=price/carat, geom="boxplot")
qplot(data=diamonds, x=color, y=price/carat, geom="boxplot") + coord_cartesian(ylim=c(2000,6000))
by(diamonds$price/diamonds$carat, diamonds$color, IQR)
by(diamonds$price/diamonds$carat, diamonds$color, summary)
qplot(data=diamonds, x=carat, geom"freqpoly")
qplot(data=diamonds, x=carat, geom"freqpol")
qplot(data=diamonds, x=carat, geom="freqpoly")
qplot(data=diamonds, x=carat, geom="freqpoly", binwidth=0.1)
qplot(data=diamonds, x=carat, geom="freqpoly")
qplot(data=diamonds, x=carat, geom="freqpoly", binwidth=0.05)
qplot(data=diamonds, x=carat, geom="freqpoly", binwidth=0.025)
qplot(data=diamonds, x=carat, geom="freqpoly", binwidth=0.01)
summary(diamonds$carat)
qplot(data=diamonds, x=carat, geom="freqpoly", binwidth=0.01) + cartesian_coord(xlim=c(1,5))
qplot(data=diamonds, x=carat, geom="freqpoly", binwidth=0.01) + coord_cartesian(xlim=c(1,5))
qplot(data=diamonds, x=carat, geom="freqpoly", binwidth=0.01) + coord_cartesian(xlim=c(2,5))
qplot(data=diamonds, x=carat, geom="freqpoly", binwidth=0.01) + coord_cartesian(xlim=c(2,5), ylim=(0,500))
qplot(data=diamonds, x=carat, geom="freqpoly", binwidth=0.01) + coord_cartesian(xlim=c(2,5), ylim=c(0,500))
qplot(data=diamonds, x=carat, geom="freqpoly", binwidth=0.01)
by(diamonds$carat, diamonds$carat, sum)
by(diamonds$carat, diamonds$carat, length)
by(diamonds$carat, diamonds$carat, dim)
by(diamonds$carat, diamonds$carat, length)
by(diamonds$carat, diamonds$carat, length) > 2000
by(diamonds$carat, diamonds$carat, length) > 2000 == TRUE
d1 <- by(diamonds$carat, diamonds$carat, length)
dim(D1)
dim(d1)
d1
summary(d1)
d1 > 2000
d1
d1[d1>2000,]
d1[d1>2000]
dplyr::tbl_df(diamonds)
load(dplyr)
load('dplyr')
install.packages("dplyr")
install.packages("tidyr")
load(dplyr)
load('dplyr')
load('tidyr')
?load
?package
?install
?package
library(dplyr)
library('dplyr')
library()
library(plyr)
library(tidyr)
tbl(diamonds)
tbl_df(diamonds)
plyr::tbl_df(diamonds)
dplyr::tbl_df(diamonds)
?plyr
library(dplyr)
?dplyr
install.packages("dplyr")
library(dplyr)
dplyr::tbl_df(diamonds)
getwd()
?read.table
install.packages("xlsx")
?xlsx
library(xlsx)
?xlsx
df_cell <- read.xlsx('cell phone total.xlsx')
df_cell <- read.xlsx('cell phone total.xlsx',1)
names(df_cell)
summary(df_cell$X2011)
by(df_cell$X2011, df_Cell$Mobile.cellular.subscriptions..total.number, summary)
by(df_cell$X2011, df_cell$Mobile.cellular.subscriptions..total.number, summary)
qplot(data=df_cell, y=X2011, x=Mobile.cellular.subscriptions..total.number)
df1 <- subset(df_cell, df$X2011 > 100000)
?subset
df1 <- subset(df_cell, X2011 > 100000)
df1 <- subset(df_cell, X2011 > 1000000)
df[1:10,1:5]
df1[1:10,1:5]
df1[1:10,c(1,47,48)]
df1[df1$Mobile.cellular.subscriptions..total.number == "India",]
df2 <- df_cell[df_cell$Mobile.cellular.subscriptions..total.number == "India",]
qplot(data=df2, x=X2011, geom="bar")
librray(ggplot)
library(ggplot2)
library(GGally)
library(scales)
install.packages('memisc')
library(dplyr)
library(reshape2)
librray(gridExtra)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
library(ggplot2)
librray(scales)
library(scales)
library(GGally)
library(dplyr)
library(reshape2)
library(tidyr)
install.packages("gridExtra")
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), dcreasing=T))
head(sort(table(diamonds$carat), decreasing=T))
head(sort(table(diamonds$price), decreasing=T))
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') +geom_jitter(alpha=1/10)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') +geom_jitter(alpha=1/50)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') +geom_jitter(alpha=1/100)
ggplot(aes(carat, price), data = diamonds) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') +geom_jitter(alpha=1/100)
ggplot(aes(carat, price), data = diamonds) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') +geom_jitter(alpha=1/10)
ggplot(aes(carat, price), data = diamonds) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') +geom_jitter(alpha=1/20)
ggplot(aes(carat, price), data = diamonds) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') +geom_point(alpha=1/2, size=0.75, position="jitter")
ggplot(aes(x = carat, y = price, color=clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color’)
ggplot(aes(x = carat, y = price, color = diamonds$color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color’)
)
)
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
library(mtable)
install.packages("memisc")
getwd()
setwd("github/eda")
load("BigDiamonds.rda")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
bluenileDiamond = data.frame(carat=1.00, cut="V.Good", color="I", clarity="VS1")
blueNileEstimate = predict(m5, newdata=bluenileDiamond, interval="prediction", level=.95)
exp(bluenileEstimate)
exp(blueNileEstimate)
